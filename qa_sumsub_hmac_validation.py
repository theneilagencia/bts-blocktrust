#!/usr/bin/env python3
"""
QA de Integra√ß√£o HMAC e Webhooks Sumsub (Produ√ß√£o Segura)
Objetivo: Validar assinatura HMAC, testar webhooks v√°lidos e inv√°lidos,
e gerar logs audit√°veis (sem segredos).
"""

import os, hmac, hashlib, json, logging, requests, sys

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
SUMSUB_SECRET_KEY = os.getenv("SUMSUB_SECRET_KEY", "demo_secret")
SUMSUB_WEBHOOK_URL = os.getenv("SUMSUB_WEBHOOK_URL", "https://bts-blocktrust.onrender.com/api/kyc/webhook")

# ===========================================================
# 1Ô∏è‚É£ Fun√ß√£o utilit√°ria ‚Äî gerar assinatura HMAC SHA256 v√°lida
# ===========================================================
def generate_valid_hmac(payload: dict) -> str:
    """Gera assinatura HMAC SHA256 v√°lida para payload"""
    message = json.dumps(payload, separators=(',', ':'), ensure_ascii=False).encode('utf-8')
    return hmac.new(SUMSUB_SECRET_KEY.encode('utf-8'), message, hashlib.sha256).hexdigest()

# ===========================================================
# 2Ô∏è‚É£ Teste Unit√°rio ‚Äî Assinatura v√°lida
# ===========================================================
def test_hmac_valid_signature():
    """Testa se a assinatura HMAC v√°lida √© gerada corretamente"""
    logger.info("üß™ Teste 1: Valida√ß√£o de assinatura HMAC v√°lida")
    
    payload = {"type": "applicantReviewed", "applicantId": "test_valid_123"}
    signature = generate_valid_hmac(payload)
    computed = hmac.new(
        SUMSUB_SECRET_KEY.encode('utf-8'),
        json.dumps(payload, separators=(',', ':'), ensure_ascii=False).encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    
    assert signature == computed, "‚ùå Falha: HMAC gerado n√£o confere."
    logger.info("‚úÖ Teste HMAC V√°lido: Assinatura confirmada corretamente.")
    return True

# ===========================================================
# 3Ô∏è‚É£ Teste Unit√°rio ‚Äî Assinatura inv√°lida
# ===========================================================
def test_hmac_invalid_signature():
    """Testa se assinatura inv√°lida √© rejeitada"""
    logger.info("üß™ Teste 2: Valida√ß√£o de rejei√ß√£o de assinatura inv√°lida")
    
    payload = {"type": "applicantReviewed", "applicantId": "test_invalid_456"}
    wrong_signature = "deadbeef" * 8  # 64 chars inv√°lidos
    computed = generate_valid_hmac(payload)
    
    assert wrong_signature != computed, "‚ùå Falha: Assinatura incorreta passou indevidamente."
    logger.info("‚úÖ Teste HMAC Inv√°lido: Assinatura incorreta corretamente rejeitada.")
    return True

# ===========================================================
# 4Ô∏è‚É£ Simula√ß√£o ‚Äî Webhook V√°lido
# ===========================================================
def simulate_valid_webhook():
    """Simula envio de webhook com assinatura v√°lida"""
    logger.info("üß™ Teste 3: Simula√ß√£o de webhook com assinatura v√°lida")
    
    payload = {"type": "applicantApproved", "applicantId": "valid_789", "reviewStatus": "completed"}
    signature = generate_valid_hmac(payload)
    headers = {
        "X-Payload-Digest": f"sha256={signature}",
        "Content-Type": "application/json"
    }
    
    try:
        res = requests.post(
            SUMSUB_WEBHOOK_URL,
            headers=headers,
            data=json.dumps(payload),
            timeout=10
        )
        logger.info(f"üì© Webhook V√°lido ‚Üí Status: {res.status_code} | Resposta: {res.text[:120]}")
        return res.status_code in [200, 201, 204]
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar webhook v√°lido: {str(e)}")
        return False

# ===========================================================
# 5Ô∏è‚É£ Simula√ß√£o ‚Äî Webhook Inv√°lido
# ===========================================================
def simulate_invalid_webhook():
    """Simula envio de webhook com assinatura inv√°lida"""
    logger.info("üß™ Teste 4: Simula√ß√£o de webhook com assinatura inv√°lida")
    
    payload = {"type": "applicantRejected", "applicantId": "invalid_999"}
    headers = {
        "X-Payload-Digest": "sha256=invalidsignature123",
        "Content-Type": "application/json"
    }
    
    try:
        res = requests.post(
            SUMSUB_WEBHOOK_URL,
            headers=headers,
            data=json.dumps(payload),
            timeout=10
        )
        logger.info(f"üö´ Webhook Inv√°lido ‚Üí Status: {res.status_code} | Resposta: {res.text[:120]}")
        # Esperamos que seja rejeitado (400, 401, 403)
        return res.status_code in [400, 401, 403]
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar webhook inv√°lido: {str(e)}")
        return False

# ===========================================================
# 6Ô∏è‚É£ Execu√ß√£o ‚Äî Rotina QA completa
# ===========================================================
def run_full_qa_validation():
    """Executa todos os testes de QA"""
    logger.info("üß™ Iniciando QA de Integra√ß√£o HMAC Sumsub...")
    logger.info("=" * 60)
    
    results = {
        "hmac_valid": False,
        "hmac_invalid": False,
        "webhook_valid": False,
        "webhook_invalid": False
    }
    
    try:
        results["hmac_valid"] = test_hmac_valid_signature()
        results["hmac_invalid"] = test_hmac_invalid_signature()
        results["webhook_valid"] = simulate_valid_webhook()
        results["webhook_invalid"] = simulate_invalid_webhook()
        
        logger.info("=" * 60)
        logger.info("üéØ QA Finalizado!")
        
        # Verificar resultados
        all_passed = all(results.values())
        if all_passed:
            logger.info("‚úÖ TODOS OS TESTES PASSARAM!")
        else:
            logger.warning("‚ö†Ô∏è ALGUNS TESTES FALHARAM:")
            for test, passed in results.items():
                status = "‚úÖ" if passed else "‚ùå"
                logger.info(f"  {status} {test}")
        
        return all_passed
        
    except AssertionError as e:
        logger.error(f"‚ùå Falha de Teste Unit√°rio: {str(e)}")
        return False
    except Exception as e:
        logger.error(f"üí• Erro inesperado durante QA: {str(e)}")
        return False

# ===========================================================
# 7Ô∏è‚É£ Logs Audit√°veis ‚Äî Sem segredos sens√≠veis
# ===========================================================
def log_audit_summary():
    """Gera resumo audit√°vel sem expor segredos"""
    logger.info("=" * 60)
    logger.info("üìä RESUMO AUDITORIA QA")
    logger.info("=" * 60)
    
    summary = {
        "qa_timestamp": "‚úÖ Teste em produ√ß√£o conclu√≠do",
        "sumsub_endpoint": SUMSUB_WEBHOOK_URL,
        "sumsub_secret_checksum": hashlib.sha256(SUMSUB_SECRET_KEY.encode()).hexdigest()[:12] + "...",
        "tests_executed": [
            "HMAC v√°lido",
            "HMAC inv√°lido",
            "Webhook v√°lido",
            "Webhook inv√°lido"
        ]
    }
    
    for key, value in summary.items():
        if isinstance(value, list):
            logger.info(f"{key}:")
            for item in value:
                logger.info(f"  - {item}")
        else:
            logger.info(f"{key}: {value}")
    
    logger.info("=" * 60)

if __name__ == "__main__":
    success = run_full_qa_validation()
    log_audit_summary()
    
    # Exit code para CI/CD
    sys.exit(0 if success else 1)

